<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C语言程序设计-Chap.2</title>
      <link href="/posts/5828.html"/>
      <url>/posts/5828.html</url>
      
        <content type="html"><![CDATA[<h1 id="程序设计初步"><a href="#程序设计初步" class="headerlink" title="程序设计初步"></a>程序设计初步</h1><h2 id="1-程序的基本结构"><a href="#1-程序的基本结构" class="headerlink" title="1.程序的基本结构"></a>1.程序的基本结构</h2><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><Font color=CornflowerBlue> <em><strong>函数</strong></em> </Font> 是C语言程序的基本单位<br>函数以 <strong>{}</strong> 为开始&#x2F;结束标志<br>作为一个程序，必须有一个主函数，即 <strong>main</strong> 函数<br>每个函数由语句构成，每个语句以 <strong>；</strong> 结尾</p><h3 id="预编译命令"><a href="#预编译命令" class="headerlink" title="预编译命令"></a>预编译命令</h3><p>每个C语言程序都含有预编译命令<br>预编译命令有三类：  </p><ol><li>宏定义  <pre class="line-numbers language-C" data-language="C"><code class="language-C">#define PI 3.14<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>文件引入  <pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>条件编译 <del>（我没用过）</del><pre class="line-numbers language-C" data-language="C"><code class="language-C">#ifdef<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>注释在程序的编译与运行中均不起作用，仅仅增加程序可读性<br>具体格式:  </p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;这是一条注释<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-基本概念"><a href="#2-基本概念" class="headerlink" title="2.基本概念"></a>2.基本概念</h2><h3 id="基本字符"><a href="#基本字符" class="headerlink" title="基本字符"></a>基本字符</h3><p>C语言源程序只能存在基本字符，否则无法通过编译<br>基本字符包括：  </p><ol><li>大小写字母</li><li>数字</li><li>其他的可显示字符</li><li>特殊字符</li></ol><p>注： <strong>程序中所有的字符（除了注释中的内容）必须是英文格式</strong></p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>标识符用于标识程序中的名字，描述变量（其实就是你给函数或变量取的名）<br>分为三类：  </p><ol><li>用户自定义标识符</li><li>预定义标识符</li><li>关键字</li></ol><p>几个重要特征：</p><ol><li>标识符只能由 <strong>字母，数字及下划线</strong> 组成</li><li>标识符对大小写敏感</li></ol><p>关于关键字：<br>系统给其赋予了特定功能，不能用于其他目的<br>如：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">intfloatdoublecharbreak...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3.数据类型"></a>3.数据类型</h2><p>C语言中的数据区分类型</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ol><li>基本类型<ol><li>整形：int</li><li>字符型：char</li><li>浮点型：<ol><li>单精度浮点型：float</li><li>双精度浮点型：double</li></ol></li></ol></li><li>构造类型<ol><li>数组类型</li><li>结构体类型</li><li>共用体类型</li><li>枚举类型</li></ol></li><li>指针类型</li><li>空类型</li></ol><p><strong>限于章节原因，本处仅对基本类型进行说明</strong></p><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><h4 id="整形（int）"><a href="#整形（int）" class="headerlink" title="整形（int）"></a>整形（int）</h4><p>用于描述整数<br>取值范围：$-2^{31}$~$2^{31}-1$</p><h4 id="浮点型（float，double）"><a href="#浮点型（float，double）" class="headerlink" title="浮点型（float，double）"></a>浮点型（float，double）</h4><p>用于描述实数<br>其中 <strong>float</strong> 与 <strong>double</strong> 的区别在于前者精度更低，占用内存也更小<br><em><strong>由于计算机以指数形式存储浮点型，因此存在误差</strong></em></p><h4 id="字符型（char）"><a href="#字符型（char）" class="headerlink" title="字符型（char）"></a>字符型（char）</h4><p>用于存储单个字符信息<br>存储的是对应字符的 <strong>ASCⅡ码</strong><br>在此举一例：  </p><pre class="line-numbers language-C" data-language="C"><code class="language-C">printf(&quot;%c&quot;, 63);printf(&quot;%c&quot;, ?);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这两条语句的输出结果应当都是字符 ‘ <strong>？</strong>’</p><h3 id="基本数据类型的扩充"><a href="#基本数据类型的扩充" class="headerlink" title="基本数据类型的扩充"></a>基本数据类型的扩充</h3><h4 id="短整型（short-int-x2F-short）"><a href="#短整型（short-int-x2F-short）" class="headerlink" title="短整型（short int &#x2F; short）"></a>短整型（short int &#x2F; short）</h4><p>与 <strong>整形（int）</strong> 的区别在于取值范围更小，占用内存也更小<br>取值范围：$-2^{15}$~$2^{15}-1$</p><h4 id="长整型（long-int-x2F-long）"><a href="#长整型（long-int-x2F-long）" class="headerlink" title="长整型（long int &#x2F; long）"></a>长整型（long int &#x2F; long）</h4><p>与 <strong>整形（int）</strong> 的区别在于取值范围大于等于int的范围，主要用于处理一些比较大的整数问题</p><h4 id="无数据类型（unsigned）"><a href="#无数据类型（unsigned）" class="headerlink" title="无数据类型（unsigned）"></a>无数据类型（unsigned）</h4><p><strong>unsigned</strong> 可以加在 <strong>int, short, long, char</strong> 的前面，取消其二进制数第一位表示符号的限制，因此unsigned类型只能表示正数</p><h3 id="变量-amp-常量"><a href="#变量-amp-常量" class="headerlink" title="变量 &amp; 常量"></a>变量 &amp; 常量</h3><p><em>顾名思义，变量在函数编译过程中可变，而常量不可变</em></p><p>如：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">double x &#x3D; 2.3;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这一语句中，x是被定义出来的变量，2.3是个常量</p><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>系统在编译过程中会为变量分配相应的内存空间，不同类型的变量被分配的空间不同</p><p>变量的定义：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int i;char c;...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>变量的赋值：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int i;i &#x3D; 10;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>分类：</p><ol><li>整形常量</li><li>实型常量</li><li>字符型常量</li><li>字符串常量</li><li>符号常量</li></ol><h5 id="关于字符型常量参与计算"><a href="#关于字符型常量参与计算" class="headerlink" title="关于字符型常量参与计算"></a>关于字符型常量参与计算</h5><p>由于字符型常量存储的是相应字符的 <strong>ASCⅡ码</strong>，因此可以将其作为整形进行相应计算<br>如：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">char c &#x3D; &#39;a&#39;;c &#x3D; c - 32;printf(&quot;%c&quot;, c);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里的输出结果应该是 ‘A’</p><h5 id="关于转义字符"><a href="#关于转义字符" class="headerlink" title="关于转义字符"></a>关于转义字符</h5><p>用转义字符表示 <strong>ASCⅡ码</strong> 中不可打印的功能性字符<br>如：换行表示为‘ <em><strong>\n</strong></em> ’, 制表（tab）表示为‘ <em><strong>\t</strong></em> ’, …</p><h5 id="关于字符串常量"><a href="#关于字符串常量" class="headerlink" title="关于字符串常量"></a>关于字符串常量</h5><p>字符串常量利用双引号括起来，可表示多个字符的集合<br>如：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&quot;Hello world&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-数据的输入与输出"><a href="#4-数据的输入与输出" class="headerlink" title="4. 数据的输入与输出"></a>4. 数据的输入与输出</h2><h3 id="输出函数printf"><a href="#输出函数printf" class="headerlink" title="输出函数printf"></a>输出函数printf</h3><p>一般格式：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">printf(&quot;格式控制串&quot;, 输出表列);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>格式控制串决定输出的数据类型，分别表示为：</p><ol><li><strong>%d</strong> -&gt; <strong>int</strong></li><li><strong>%f</strong> -&gt; <strong>float&#x2F;double</strong></li><li><strong>%c</strong> -&gt; <strong>char</strong></li><li><strong>%ld</strong> -&gt; <strong>long</strong></li><li><strong>%s</strong> -&gt; <strong>字符串</strong></li></ol><h3 id="输入函数scanf（在Visual-Studio中为scanf-s）"><a href="#输入函数scanf（在Visual-Studio中为scanf-s）" class="headerlink" title="输入函数scanf（在Visual Studio中为scanf_s）"></a>输入函数scanf（在Visual Studio中为scanf_s）</h3><p>一般格式：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">scanf(&quot;格式控制串&quot;, 地址表列);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：<br>格式控制串与printf大抵相同，但是这里将 <strong>double</strong> 的格式控制串更改为了 <strong>%lf</strong><br>同时后面的地址表列为地址，故需要在变量前加上取地址符号 <strong>&amp;</strong></p><h3 id="字符型数据的输入与输出"><a href="#字符型数据的输入与输出" class="headerlink" title="字符型数据的输入与输出"></a>字符型数据的输入与输出</h3><p>C语言为字符型数据设定了新的输入方式（ <strong>getchar</strong> ）与新的输出方式（ <strong>putchar</strong> ）<br>格式为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">putchar</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="5-运算符与表达式"><a href="#5-运算符与表达式" class="headerlink" title="5.运算符与表达式"></a>5.运算符与表达式</h2><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>运算符是C语言中表示相应运算的特殊符号<br><img src="https://mug-chensblog-1310677143.cos.ap-beijing.myqcloud.com/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-Chap.2/%E8%BF%90%E7%AE%97%E7%AC%A6.png" alt="运算符表"></p><p>关于运算符的运算顺序与层级，博主认为依靠个人的编程经验与计算习惯可以判断，故这里不再详述。</p><p>几点提示：  </p><ol><li>C语言中整形除以整形得出的数字还是整形，如：  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>这个语句的输出应当是1</li><li><strong>size of</strong> 是个运算符，不是个函数，要记牢</li><li>自增（减）时，如果符号在前，就先加减，再运算，反之，若符号在后，就先运算，再加减</li><li>关于 <strong>+，*，%</strong> 与 <strong>&#x3D;</strong> 的连用： <pre class="line-numbers language-c" data-language="c"><code class="language-c">a <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>等价于：<pre class="line-numbers language-c" data-language="c"><code class="language-c">a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>上述法则对于 *，%同样适用，不再赘述</li></ol><h2 id="6-数据类型的转换"><a href="#6-数据类型的转换" class="headerlink" title="6.数据类型的转换"></a>6.数据类型的转换</h2><h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><p>在运算时，如果程序识别到两个不同类型的数据进行运算，会以 <em><strong>向高看齐</strong></em> 的原则进行格式转换<br><img src="https://mug-chensblog-1310677143.cos.ap-beijing.myqcloud.com/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-Chap.2/%E5%90%91%E9%AB%98%E7%9C%8B%E9%BD%90.png" alt="向高看齐"></p><p>注意：此时可能会出现数值溢出的问题，通常警告为：</p><pre class="line-numbers language-none"><code class="language-none">warning: overflow in implicit constant conversion<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>在编程过程中，如果需要令一个变量以另一个数据类型参与运算，可以采用强制类型转换的方式，具体格式为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">double</span> x<span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>i <span class="token operator">+</span> <span class="token number">3.14</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到，上述过程中对原本为整形的 i 进行了强制类型转换，将其转换为 double 类型参与运算</p><p>需要注意的是，强制类型转换后，被转换的变量类型是不变的，即 i 仍然是int型变量</p><h2 id="7-数学函数"><a href="#7-数学函数" class="headerlink" title="7.数学函数"></a>7.数学函数</h2><p>在C语言中有相应的对各种数学函数进行定义的库： <strong>&lt;math.h&gt;</strong><br>在需要使用时，在函数前进行相应的预编译即可</p><p><img src="https://mug-chensblog-1310677143.cos.ap-beijing.myqcloud.com/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-Chap.2/math.h.png" alt="math.h中的常用函数"></p><p>以上，是编程前需要了解的一些知识</p><p>这篇博文就到这里~</p>]]></content>
      
      
      <categories>
          
          <category> Study Notes - C programming </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言程序设计-Chap.1</title>
      <link href="/posts/32835.html"/>
      <url>/posts/32835.html</url>
      
        <content type="html"><![CDATA[<h1 id="程序设计概述"><a href="#程序设计概述" class="headerlink" title="程序设计概述"></a>程序设计概述</h1><h2 id="1-程序设计语言"><a href="#1-程序设计语言" class="headerlink" title="1.程序设计语言"></a>1.程序设计语言</h2><p><em>计算机语言：计算机能够接受和处理的具有一定格式的语言</em>  </p><h3 id="发展历程："><a href="#发展历程：" class="headerlink" title="发展历程："></a>发展历程：</h3><ol><li>机器语言：二进制</li><li>汇编语言：少许助记符号</li><li>高级语言：  <ol><li>面向过程：Basic， C等</li><li>面向对象：Java， C++等</li></ol></li></ol><h2 id="2-程序设计基本概念"><a href="#2-程序设计基本概念" class="headerlink" title="2.程序设计基本概念"></a>2.程序设计基本概念</h2><h3 id="五部曲：（我自己起的）"><a href="#五部曲：（我自己起的）" class="headerlink" title="五部曲：（我自己起的）"></a>五部曲：<del>（我自己起的）</del></h3><ol><li>分析</li><li>确定算法</li><li>编程</li><li>调试</li><li>优化、改进</li></ol><h3 id="程序-x3D-数据结构-算法"><a href="#程序-x3D-数据结构-算法" class="headerlink" title=" 程序 &#x3D; 数据结构 + 算法 "></a><Font color=CornflowerBlue> <em><strong>程序 &#x3D; 数据结构 + 算法</strong></em> </Font></h3><h3 id="算法的特性："><a href="#算法的特性：" class="headerlink" title="算法的特性："></a>算法的特性：</h3><ol><li>有穷性：有终点</li><li>确定性：定义清晰</li><li>有零个或多个输入</li><li>至少有一个输出</li><li>可行性：每一步都得可行</li></ol><h3 id="如何描述算法？"><a href="#如何描述算法？" class="headerlink" title="如何描述算法？"></a>如何描述算法？</h3><ol><li><em><strong>流程图</strong></em> ：最常用的方法</li><li>结构流程图：<del>我没用过</del></li><li>伪代码：对相应代码块进行简写</li></ol><p>关于流程图的图例：<br><img src="https://mug-chensblog-1310677143.cos.ap-beijing.myqcloud.com/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-Chap.1/%E6%B5%81%E7%A8%8B%E5%9B%BE%E5%9B%BE%E4%BE%8B.png" alt="流程图图例"></p><h2 id="3-结构化程序设计"><a href="#3-结构化程序设计" class="headerlink" title="3.结构化程序设计"></a>3.结构化程序设计</h2><p><em>顾名思义，将“程序设计”这个流程结构化，标准化</em></p><h3 id="三种基本结构"><a href="#三种基本结构" class="headerlink" title="三种基本结构"></a>三种基本结构</h3><ol><li>顺序：循序渐进</li><li>选择：涉及到判断，选择支线 <del>（不要介意这个游戏内常见的用语）</del></li><li>循环：涉及到判断，并是否返回执行</li></ol><h2 id="4-程序的实现环境"><a href="#4-程序的实现环境" class="headerlink" title="4.程序的实现环境"></a>4.程序的实现环境</h2><h3 id="硬件环境"><a href="#硬件环境" class="headerlink" title="硬件环境"></a>硬件环境</h3><ol><li>输入设备</li><li>输出设备</li><li>外存&amp;内存</li><li>CPU：<ol><li>运算器</li><li>控制器</li></ol></li></ol><h3 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h3><ol><li>操作系统</li><li>编辑程序</li><li>编译程序</li><li>连接程序</li></ol><h3 id="一些解释："><a href="#一些解释：" class="headerlink" title="一些解释："></a>一些解释：</h3><p>用高级语言编写出来的文件叫做 <strong>源程序</strong> ，不能直接执行<br>因此，需要先将其转换为可执行程序，这一过程称为 <strong>C程序的加工</strong><br>C程序的加工分为两步：  </p><ol><li>编译：具体表现为将 <em><strong>.c</strong></em> 程序转换为 <em><strong>.obj</strong></em> 程序</li><li>链接：将 <em><strong>.obj</strong></em> 程序与其他目标程序&#x2F;库装配，形成 <em><strong>.exe</strong></em>文件</li></ol><p>后续过程中如果涉及到编程，博主会以 <em><strong>Visual Studio 2022</strong></em> 为运行环境</p><p>这篇博文就到这里~</p>]]></content>
      
      
      <categories>
          
          <category> Study Notes - C programming </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>本博客的搭建流程</title>
      <link href="/posts/23043.html"/>
      <url>/posts/23043.html</url>
      
        <content type="html"><![CDATA[<h2 id="搭建流程概述"><a href="#搭建流程概述" class="headerlink" title="搭建流程概述"></a>搭建流程概述</h2><h3 id="Step-1：Nodejs的下载及配置"><a href="#Step-1：Nodejs的下载及配置" class="headerlink" title="Step 1：Nodejs的下载及配置"></a>Step 1：Nodejs的下载及配置</h3><p><em>本博客是以Hexo为基本框架，以Github Page为雏形的个人博客，而在Windows上装载Hexo的最佳方法是通过Git（一个应用，内置了Linux的些许命令）从Github上克隆相应仓库，Git的运行需要Nodejs所提供的环境</em></p><p>首先前往Nodejs官网：<strong>nodejs.org</strong></p><p><img src="https://mug-chensblog-1310677143.cos.ap-beijing.myqcloud.com/%E6%9C%AC%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/Nodejs.png" alt="Nodejs官网"></p><p>这边我选择的是左边的18.12.1版本，相对来说比较稳定<br>安装过程很简单，按照默认配置来就可以<del>（无脑下一步）</del></p><p>此后会涉及到两个环境变量的配置：<br>这里附上一篇博文，我觉得人家讲的比我清楚<del>（水平有限，见谅）</del>  </p><blockquote><p><a href="https://blog.csdn.net/zimeng303/article/details/112167688">https://blog.csdn.net/zimeng303/article/details/112167688</a></p></blockquote><p>注：下载完后可以通过cmd（快捷键Ctrl+X，选中其中的 <strong>终端(管理员)</strong> ）检验一下Nodejs是否成功下载并运行了，一并检查一下npm是否成功安装（npm是一个在安装Nodejs后自动给你附带安装的东西，后面会用到）<br>具体命令：</p><pre class="line-numbers language-none"><code class="language-none">&#123;node -v  npm -v&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>应该都不会报错才对</p><h3 id="Step-2-将npm更改为国内镜像源提供的cnpm"><a href="#Step-2-将npm更改为国内镜像源提供的cnpm" class="headerlink" title="Step 2: 将npm更改为国内镜像源提供的cnpm"></a>Step 2: 将npm更改为国内镜像源提供的cnpm</h3><p><em>本步骤的目的在于更换npm组件，由于原版npm在后续流程中极其容易报错，因此本步骤至少在博主创建博客时是必要的</em></p><p>命令为：</p><pre class="line-numbers language-none"><code class="language-none">&#123;npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>本步骤需要等待一段时间（安装耗时）</p><p>等待其安装完成后，分别输入：</p><pre class="line-numbers language-none"><code class="language-none">&#123;cnpm  cnpm -v&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>应该都不会报错</p><p><strong>注：本步骤中博主遇到了报错情况，提示为：</strong></p><pre class="line-numbers language-none"><code class="language-none">&#123;cnpm : 无法加载文件 D:\nodejs\node_global\cnpm.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?LinkID&#x3D;135170 中的 about_Execution_Policies&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这种情况下，可以通过命令解除限制：</p><pre class="line-numbers language-none"><code class="language-none">&#123;Set-ExecutionPolicy RemoteSigned -Scope Process&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接触限制后再次输入cnpm相关命令即可</p><h3 id="Step-3-正式安装Hexo（主角登场）"><a href="#Step-3-正式安装Hexo（主角登场）" class="headerlink" title="Step 3: 正式安装Hexo（主角登场）"></a>Step 3: 正式安装Hexo<del>（主角登场）</del></h3><p><em>上文有提到，本博客以Hexo为基本框架</em></p><p>仍然是在cmd中，输入：</p><pre class="line-numbers language-none"><code class="language-none">&#123;cnpm install -g hexo-cli&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>等待其安装成功后，再输入：</p><pre class="line-numbers language-none"><code class="language-none">&#123;hexo -v&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>若没报错，说明安装成功</p><h3 id="Step-4-下载Git"><a href="#Step-4-下载Git" class="headerlink" title="Step 4: 下载Git"></a>Step 4: 下载Git</h3><p><em>上文有提到，通过Git可以有效装载运行Hexo，并与相关的Github仓库进行配套使用</em></p><p>前往Git官网：<strong><a href="https://git-scm.com/">https://git-scm.com/</a></strong></p><p><img src="https://mug-chensblog-1310677143.cos.ap-beijing.myqcloud.com/%E6%9C%AC%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/Git.png" alt="Git官网"></p><p>博主采用的是2.39.0版本</p><p>同样的，下载，安装<del>（无脑下一步）</del></p><p>接下来仍然涉及到一个环境变量的设置：<br>把刚刚Git安装目录下的bin文件夹打开，复制相应的文件路径，将其添加到<strong>环境变量-系统变量-Path</strong>里面</p><h3 id="Step-5：新建一个用于操作你的博客的文件夹"><a href="#Step-5：新建一个用于操作你的博客的文件夹" class="headerlink" title="Step 5：新建一个用于操作你的博客的文件夹"></a>Step 5：新建一个用于操作你的博客的文件夹</h3><p><em>接下来就是正式的博客搭建环节</em></p><p>在你的电脑中随意一个位置（你得能记住奥）创建一个新文件夹，取名Blog<br>此后点进那个文件夹，右键空白处，点击<strong>Git Bash Here</strong><br>这时应该会出现一个黑框，像这样：</p><p><img src="https://mug-chensblog-1310677143.cos.ap-beijing.myqcloud.com/%E6%9C%AC%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/gitbash.png" alt="Git控制台界面"></p><p>在其中输入：</p><pre class="line-numbers language-none"><code class="language-none">&#123;hexo init&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里大概率会出现两个问题：<br>（1）显示经过多少多少毫秒之后连接错误<br>（2）显示无法成功安装，让你人工输入<em>npm install</em></p><p>如果是第一个错误，请你给git挂上代理（自行搜索）<br>如果是第二个错误，这时候之前做的就有用了，这时直接输入<em>npm install</em>大概率会报错，所以我们输入:</p><pre class="line-numbers language-none"><code class="language-none">&#123;cnpm install&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果没有报错，就大概率成了，这时候看向你的Blog文件夹，如果有一个叫<em>node_modules</em>的文件夹，就可以放心进行下一步了</p><h3 id="Step-6-尝试第一次启动本地服务器"><a href="#Step-6-尝试第一次启动本地服务器" class="headerlink" title="Step 6: 尝试第一次启动本地服务器"></a>Step 6: 尝试第一次启动本地服务器</h3><p>在刚刚那个Git控制台中再次输入：</p><pre class="line-numbers language-none"><code class="language-none">&#123;hexo s&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果显示：</p><pre class="line-numbers language-none"><code class="language-none">&#123;Hexo running at ______(这里是一个地址）_________, Press Ctrl+C to stop.&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>说明成功了，现在在浏览器内打开那个地址，就可以看到一个初步的网页，上面有 <strong>Hexo</strong>标识</p><p>我们先Ctrl+C将其关闭</p><h3 id="Step-7-建立Github账号，并通过SSH-key将其与你的电脑连接"><a href="#Step-7-建立Github账号，并通过SSH-key将其与你的电脑连接" class="headerlink" title="Step 7: 建立Github账号，并通过SSH key将其与你的电脑连接"></a>Step 7: 建立Github账号，并通过SSH key将其与你的电脑连接</h3><p>这边需要你创建一个自己的Github账号<br>牢记你的注册邮箱以及用户名，密码</p><p>创建一个新的库（repository），将这个库的名字改为 <em><strong>你的账户名.github.io</strong></em>  (这一步很重要！)  </p><p>此后进行SSH与Github的绑定,这里还是给出链接  </p><blockquote><p><a href="https://blog.csdn.net/qq_35703954/article/details/87446876">https://blog.csdn.net/qq_35703954/article/details/87446876</a></p></blockquote><p>绑定成功后，需要对Blog文件夹中的一个文件进行些许更改<br>那个文件叫： <em><strong>_config.yml</strong></em></p><p>注：这个文件可以使用记事本打开，但是我强烈建议有需求的各位下载VScode打开这个文件，自行搜索就可以。</p><p>咱们继续：<br>打开后将文件翻到最后，有一个 <em><strong>deploy：…</strong></em> ，将deploy以下的部分全部删除，改为：</p><pre class="line-numbers language-none"><code class="language-none">&#123;deploy:    type: git    repository: 你自己刚刚创建的GitHub的那个项目地址（下文会写如何查看）    branch: main&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong>几个需要注意的点</strong></em><br>· 注意格式，deploy后面的内容是有缩进的，以及冒号后面的空格。<br>· 项目地址的查看方法：<br>前往你的GitHub相应项目中，右上角有一个 <em><strong>code</strong></em> 按钮，长这样：</p><p><img src="https://mug-chensblog-1310677143.cos.ap-beijing.myqcloud.com/%E6%9C%AC%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/code.png" alt="Code"><br>点击它，会出现这样的一个界面：</p><p><img src="https://mug-chensblog-1310677143.cos.ap-beijing.myqcloud.com/%E6%9C%AC%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/code-1.png" alt="点击Code之后的界面"><br>选中那个 <em><strong>HTTPS</strong></em>， 之后将底下的链接复制，粘贴至上面的 <em><strong>_config.yml</strong></em> 文件的repository后面</p><h3 id="Step-8-装载部署工具"><a href="#Step-8-装载部署工具" class="headerlink" title="Step 8: 装载部署工具"></a>Step 8: 装载部署工具</h3><p>还是 <em><strong>Blog</strong></em> 文件夹，还是右键 <strong>Git Bash Here</strong><br>输入：</p><pre class="line-numbers language-none"><code class="language-none">&#123;cnpm install hexo-deployer-git --save&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>等待安装完成，之后输入：</p><pre class="line-numbers language-none"><code class="language-none">&#123;hexo g&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>等待生成完成（不报错），之后再输入：</p><pre class="line-numbers language-none"><code class="language-none">&#123;hexo d&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这之后再输入你的库的名称（即 <em><strong>你的账户名.github.io</strong></em>）到浏览器地址栏中，应该就能看到刚刚那个有Hexo的界面了</p><h3 id="Step-9-编写博文"><a href="#Step-9-编写博文" class="headerlink" title="Step 9: 编写博文"></a>Step 9: 编写博文</h3><p><em><strong>Blog</strong></em>文件夹，右键，<strong>Git Bash Here</strong><br>输入：</p><pre class="line-numbers language-none"><code class="language-none">&#123;hexo n 你想起的文章名&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后应该会出现一个提示，在你的 <em>source-_posts</em>文件夹内生成了一个markdown文件，这就是你撰写新博客的地方</p><p>注：这也是为什么我推荐安装vscode，因为vscode只需要安装两个插件就可以做到编写，预览Markdown文件，很方便（方法请自行搜索）</p><p>写完你的博文之后，保存，返回 <em><strong>blog</strong></em>文件夹，<strong>Git Bash Here</strong>，输入：</p><pre class="line-numbers language-none"><code class="language-none">&#123;hexo cl&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>处理完后，输入：</p><pre class="line-numbers language-none"><code class="language-none">&#123;hexo g&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>处理完后，输入：</p><pre class="line-numbers language-none"><code class="language-none">&#123;hexo d&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>处理完后，输入：</p><pre class="line-numbers language-none"><code class="language-none">&#123;hexo s&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>一套流程下来，你的博文就可以被成功上传到那个网页中</p><h2 id="一些想法"><a href="#一些想法" class="headerlink" title="一些想法"></a>一些想法</h2><p>此次博客的搭建，从整体而言是相对繁琐的，同时中间掉了很多次坑，往往一个坑都得花费1-2个小时进行查询，修补，一套流程下来基本上花了有两天时间。</p><p>回过头来，再看这一整个流程，缺乏的就是一个整体框架，如果一股脑冲进去，会做着做着迷失了方向，就不知道该做什么了</p><p>故此，在这里整理下整套流程，供读者参考，更是供自己反思优化</p><p>关于美化，应该不会再整理步骤了，因为各种模板包里面都有详尽的使用说明，并且不同的模板操作方式不同，待读者自行探索了</p><p>这篇博文就到这里</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>开博第一篇</title>
      <link href="/posts/32455.html"/>
      <url>/posts/32455.html</url>
      
        <content type="html"><![CDATA[<h2 id="关于这个博客"><a href="#关于这个博客" class="headerlink" title="关于这个博客"></a>关于这个博客</h2><p>这个博客来源于博主的一时兴起。</p><p>想发点啥但没有很系统的方法，之后发现了个人博客是个挺自在的地方，故就这样了。</p><h2 id="关于博客的内容"><a href="#关于博客的内容" class="headerlink" title="关于博客的内容"></a>关于博客的内容</h2><p>初步确定为进行个人学习笔记的整理，以及各种博主想说的（包括但不限于各种评价，各种想法…）</p><h2 id="后续更新计划"><a href="#后续更新计划" class="headerlink" title="后续更新计划"></a>后续更新计划</h2><p>· 博客的美化工作，会持续，长期进行</p><p>· 各类二级界面的创建与完善</p><p>· 后续内容的持续跟进…</p><p>目前就这些啦~</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
